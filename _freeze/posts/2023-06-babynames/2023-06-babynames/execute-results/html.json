{
  "hash": "8bd13dfd7c41525d595a801c6373243c",
  "result": {
    "markdown": "---\ntitle: \"Cleaning Babynames\"\nsubtitle: |\n In this post I download, clean and tidy open data from the City of Munich regarding baby names. The available datasets have different filename patterns, column names, delimiters, typos and implicitly missing data. I'll use the cleaned data for future posts.\ncategories: \n  - data cleaning\n  - EDA\n  - R\ndate: 2023-06-19\ncode-fold: true\nimage: images/order.webp\nimage-alt: \"Ten scrabble letters spelling the words 'Order' in the top and 'Chaos' in the lowe part. The letters forming 'Order' are nicely arranged, while the letter spelling 'Chaos' are arranged in a chaotic way.\"\ncitation:\n  type: post-weblog\n---\n\n\n![Foto by <a href=\"https://unsplash.com/@brett_jordan?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Brett Jordan</a> on <a href=\"https://unsplash.com/de/fotos/M3cxjDNiLlQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>](images/order.webp)\n\n## Introduction and Credits\nThe [Open Data Portal](https://opendata.muenchen.de) of the City of Munich (Germany) provides all kinds of datasets regarding infrastructure, traffic, economy and demographics. The names given to babies can be found [here](https://opendata.muenchen.de/dataset/vornamen-von-neugeborenen) (credits: Datenquelle: dl-de/by-2-0: Landeshauptstadt München – opendata.muenchen.de).\n\nThe data has some issues which I'll address in this post below as preparation for future posts using this dataset.\n\n:::{.callout-tip collapse=true appearance='default' icon=true}\n## Short dictionary for non-German readers\n\n| German | English |\n| --- | --- |\n| Vorname | first name |\n| Anzahl | count |\n| Geschlecht | sex^[as stated by the parents or the clinic when registering a birth] |\n| Jahr | year |\n:::\n\n  \n\n## Reading and Cleaning the Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Libraries used\"}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(stringi)\nlibrary(summarytools)\n```\n:::\n\n\nUnfortunately the files have different naming patterns and use different delim-characters. In addition the year 2015 has a different column name for the first names. Since the file list is rather short, it's quicker to hard-code this than to work out a fancy algorithm...\n\n::: {.column-margin}\n![I really appreciate the open data portal of our city, but there's still some room for improvement [@OpenData München](https://twitter.com/opendata_muc)](images/meme.jpg)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nvornamen_2022 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2022.csv\")), delim = \",\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2022)\n\nvornamen_2021 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2021.csv\")), delim = \",\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2021)\n\nvornamen_2020 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2020.csv\")), delim = \",\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2020)\n\nvornamen_2019 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2019.csv\")), delim = \",\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2019)\n\nvornamen_2018 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2018.csv\")), delim = \",\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2018)\n\nvornamen_2017 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2017.csv\")), delim = \",\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2017)\n\nvornamen_2016 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2016.csv\")), delim = \",\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2016)\n\nvornamen_2015 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2015.csv\")), delim = \";\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2015) |> \n  rename(vorname = vornamen)\n\nvornamen_2014 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2014.csv\")), delim = \";\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2014)\n\nvornamen_2013 <- read_delim(Sys.glob(here::here(\"posts\", \"2023-06-babynames\", \"original_data\", \"*2013.csv\")), delim = \";\") |> \n  janitor::clean_names() |> \n  mutate(jahr = 2013)\n\nvornamen_raw <- rbind(\n  vornamen_2013, \n  vornamen_2014, \n  vornamen_2015, \n  vornamen_2016, \n  vornamen_2017, \n  vornamen_2018, \n  vornamen_2019, \n  vornamen_2020, \n  vornamen_2021, \n  vornamen_2022 \n  )\n```\n:::\n\n\nIn addition, Unicode characters are escaped in the form of e.g. <U+0219> for the letter ș. So we'll clean that with the help of the `{stringi}` package.^[credits to the answer of this [stack overflow question](https://stackoverflow.com/questions/49739800/convert-unicode-to-readable-characters-in-r)]. After that we'll drop 4 lines without name and sex, and 4 others where the name is \"+\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvornamen <- vornamen_raw |> \n  mutate(\n    vorname = stringi::stri_unescape_unicode(   # this function doesn't recognize the <U+1234> escape, so we\n      gsub(\"<U\\\\+(....)>\", \"\\\\\\\\u\\\\1\", vorname) # need to replace these with \\u1234 as intermediate step\n      ),\n    anzahl = ifelse(anzahl == \"4 oder wenniger\", \"4 oder weniger\", anzahl) # there's a typo in ~14k entries...\n  ) |> \n  drop_na() |> \n  filter(vorname != \"+\")\n```\n:::\n\n\nNow that this is done, let's have a first look at the head of the cleaned data...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(head(vornamen))\n```\n\n::: {.cell-output-display}\n|vorname    |anzahl |geschlecht | jahr|\n|:----------|:------|:----------|----:|\n|Maximilian |166    |m          | 2013|\n|Felix      |124    |m          | 2013|\n|Anna       |109    |w          | 2013|\n|David      |109    |m          | 2013|\n|Sophia     |108    |w          | 2013|\n|Emilia     |103    |w          | 2013|\n:::\n:::\n\n\n...and a dataframe summary:\n\n:::{.column-page-inset}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nsummarytools::dfSummary(vornamen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData Frame Summary  \nvornamen  \nDimensions: 42077 x 4  \nDuplicates: 10  \n\n--------------------------------------------------------------------------------------------------------------\nNo   Variable      Stats / Values             Freqs (% of Valid)    Graph                 Valid      Missing  \n---- ------------- -------------------------- --------------------- --------------------- ---------- ---------\n1    vorname       1. Jona                       19 ( 0.0%)                               42077      0        \n     [character]   2. Mika                       19 ( 0.0%)                               (100.0%)   (0.0%)   \n                   3. Toni                       19 ( 0.0%)                                                   \n                   4. Charlie                    18 ( 0.0%)                                                   \n                   5. Luca                       18 ( 0.0%)                                                   \n                   6. Noa                        18 ( 0.0%)                                                   \n                   7. Iman                       17 ( 0.0%)                                                   \n                   8. Lou                        17 ( 0.0%)                                                   \n                   9. Minh                       17 ( 0.0%)                                                   \n                   10. Deniz                     16 ( 0.0%)                                                   \n                   [ 18219 others ]           41899 (99.6%)         IIIIIIIIIIIIIIIIIII                       \n\n2    anzahl        1. 4 oder weniger          36499 (86.7%)         IIIIIIIIIIIIIIIII     42077      0        \n     [character]   2. 5                         833 ( 2.0%)                               (100.0%)   (0.0%)   \n                   3. 6                         646 ( 1.5%)                                                   \n                   4. 7                         486 ( 1.2%)                                                   \n                   5. 8                         386 ( 0.9%)                                                   \n                   6. 9                         306 ( 0.7%)                                                   \n                   7. 10                        273 ( 0.6%)                                                   \n                   8. 11                        206 ( 0.5%)                                                   \n                   9. 12                        149 ( 0.4%)                                                   \n                   10. 14                       146 ( 0.3%)                                                   \n                   [ 124 others ]              2147 ( 5.1%)         I                                         \n\n3    geschlecht    1. m                       20857 (49.6%)         IIIIIIIII             42077      0        \n     [character]   2. w                       21220 (50.4%)         IIIIIIIIII            (100.0%)   (0.0%)   \n\n4    jahr          Mean (sd) : 2017.6 (2.9)   2013 : 4012 ( 9.5%)   I                     42077      0        \n     [numeric]     min < med < max:           2014 : 4030 ( 9.6%)   I                     (100.0%)   (0.0%)   \n                   2013 < 2018 < 2022         2015 : 3931 ( 9.3%)   I                                         \n                   IQR (CV) : 5 (0)           2016 : 4308 (10.2%)   II                                        \n                                              2017 : 4241 (10.1%)   II                                        \n                                              2018 : 4182 ( 9.9%)   I                                         \n                                              2019 : 4263 (10.1%)   II                                        \n                                              2020 : 4342 (10.3%)   II                                        \n                                              2021 : 4378 (10.4%)   II                                        \n                                              2022 : 4390 (10.4%)   II                                        \n--------------------------------------------------------------------------------------------------------------\n```\n:::\n:::\n\n:::\n\n## Imputing Missing Values\n\nFor a large part of names (36499), there's no exact count given. It only says that there are 4 or less babies born with this name (\"4 oder weniger\" in German). Since this affects >80% of distinct name/year combinations, I cannot just drop those. To fill these implicit missing values, I'll impute them.^[Imputations on such a large part of data will obviously introduce some blur compared to the actual data. As more precise data is not publicly available and I'll mostly work on the more frequent names, where exact numbers are available, this is sufficient for me.]\n\nTo estimate the frequencies of the rarer names, I assume a roughly exponential distribution with a tendency to more unique names. The following probabilities are used:\n\n```\nn = 1: 0.52\nn = 2: 0.27\nn = 3: 0.14\nn = 4: 0.07\n```\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Imputation\"}\n# count missing values \nn <- nrow(filter(vornamen, anzahl == \"4 oder weniger\")) \n\n\n{\n  # set seed for reproducibility for this step only\n  set.seed(753)\n  \n  vornamen_imputed <- vornamen |> \n    # impute using the sample() function using the above probabilities\n    mutate(\n      anzahl = as.numeric(ifelse(anzahl == \"4 oder weniger\", sample(c(1, 2, 3, 4), size = n, replace = TRUE, prob = c(0.52, 0.27, 0.14, 0.07)), anzahl))\n    )\n}\n```\n:::\n\n\nIf the estimation/imputation is suitable, then we should come to a total of births similar to what the official birth statisics say.\nThe [official reports](https://stadt.muenchen.de/dam/jcr:ac5d08c1-3ad4-4d60-b1af-a8387cede88f/jt230126.pdf) state these numbers for the years 2017-2022 respectively: 17629, 17587, 17509, 17593, 18330 and 16540.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Accuracy check\"}\nvornamen_diff <- vornamen_imputed |> \n  uncount(anzahl) |> \n  group_by(jahr) |> \n  summarise(estimated = n()) |> \n  filter(jahr >= 2017) |> \n  mutate(\n    reference = c(17629, 17587, 17509, 17593, 18330, 16540),\n    difference = reference - estimated,\n    diff_pct = difference / reference *100\n  )\n  \nknitr::kable(vornamen_diff)\n```\n\n::: {.cell-output-display}\n| jahr| estimated| reference| difference|   diff_pct|\n|----:|---------:|---------:|----------:|----------:|\n| 2017|     17647|     17629|        -18| -0.1021045|\n| 2018|     17472|     17587|        115|  0.6538921|\n| 2019|     17295|     17509|        214|  1.2222286|\n| 2020|     17797|     17593|       -204| -1.1595521|\n| 2021|     18196|     18330|        134|  0.7310420|\n| 2022|     16715|     16540|       -175| -1.0580411|\n:::\n:::\n\n\nThe imputation is quite okay, with an RMSE of around 157.87. In percent, the (root mean squared) difference is about 0.91%, with a maximum of 1.22%, which is acceptable for the purpose of this blog post (and future ones).\n\n\n## (Short) Exploratory Analysis\n\n- There are 9501 distinct female names and 9249 distinct male names.\n- The longest name (that is not a composed name with a \"-\") is 16 characters long: \"Sakthi......avani\"\n\n\n\n\n\n- The shortest names are 2 characters long and there are 44 of those.\n- The most common names by year and sex are:\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  vornamen_imputed |> \n    group_by(jahr, geschlecht) |> \n    summarise(anzahl = max(anzahl)) |> \n    left_join(vornamen_imputed) |> \n    knitr::kable()\n  ```\n  \n  ::: {.cell-output-display}\n  | jahr|geschlecht | anzahl|vorname    |\n  |----:|:----------|------:|:----------|\n  | 2013|m          |    166|Maximilian |\n  | 2013|w          |    109|Anna       |\n  | 2014|m          |    178|Maximilian |\n  | 2014|w          |    119|Anna       |\n  | 2015|m          |    165|Maximilian |\n  | 2015|w          |    117|Anna       |\n  | 2016|m          |    154|Maximilian |\n  | 2016|w          |    129|Emilia     |\n  | 2017|m          |    149|Maximilian |\n  | 2017|w          |    136|Emilia     |\n  | 2018|m          |    155|Maximilian |\n  | 2018|w          |    126|Anna       |\n  | 2019|m          |    136|Maximilian |\n  | 2019|w          |    120|Emilia     |\n  | 2020|m          |    144|Maximilian |\n  | 2020|w          |    144|Emilia     |\n  | 2021|m          |    136|Maximilian |\n  | 2021|w          |    131|Emilia     |\n  | 2022|m          |    104|Maximilian |\n  | 2022|w          |    103|Emilia     |\n  :::\n  :::\n\n\n:::{.column-page-inset}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wordcloud2)\nvornamen_wc <- vornamen_imputed |> \n  distinct(vorname, .keep_all = TRUE) |> \n  filter(anzahl >= 5) |> \n  transmute(\n    word = vorname,\n    freq = anzahl\n  )\n\nwordcloud2::wordcloud2(\n  data = vornamen_wc,\n  size = 0.5,\n  color = \"random-light\",\n  minSize = 7,\n  widgetsize = c(\"99%\", 400)\n)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-956879dee6e836e9b2c8\" style=\"width:99%;height:400px;\" class=\"wordcloud2 html-widget \"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-956879dee6e836e9b2c8\">{\"x\":{\"word\":[\"Maximilian\",\"Felix\",\"Anna\",\"David\",\"Sophia\",\"Emilia\",\"Moritz\",\"Jakob\",\"Paul\",\"Emma\",\"Julian\",\"Alexander\",\"Vincent\",\"Sophie\",\"Marie\",\"Johanna\",\"Leon\",\"Lukas\",\"Noah\",\"Anton\",\"Emil\",\"Mia\",\"Helena\",\"Luisa\",\"Laura\",\"Lena\",\"Ella\",\"Benjamin\",\"Amelie\",\"Luis\",\"Clara\",\"Lara\",\"Valentin\",\"Jonas\",\"Leo\",\"Daniel\",\"Julia\",\"Lina\",\"Luca\",\"Philipp\",\"Elias\",\"Jonathan\",\"Theresa\",\"Paula\",\"Tim\",\"Antonia\",\"Emily\",\"Niklas\",\"Elisa\",\"Lea\",\"Samuel\",\"Marlene\",\"Simon\",\"Charlotte\",\"Leopold\",\"Magdalena\",\"Hannah\",\"Louis\",\"Greta\",\"Ben\",\"Leonie\",\"Matilda\",\"Mila\",\"Hanna\",\"Leonard\",\"Oskar\",\"Valentina\",\"Benedikt\",\"Ludwig\",\"Sebastian\",\"Fabian\",\"Ferdinand\",\"Maja\",\"Sarah\",\"Florian\",\"Julius\",\"Sara\",\"Max\",\"Franziska\",\"Maria\",\"Josephine\",\"Adrian\",\"Gabriel\",\"Mathilda\",\"Raphael\",\"Isabella\",\"Konstantin\",\"Lucas\",\"Elena\",\"Lisa\",\"Sofia\",\"Victoria\",\"Henri\",\"Johann\",\"Katharina\",\"Klara\",\"Lilly\",\"Annika\",\"Elisabeth\",\"Jan\",\"Finn\",\"Linus\",\"Nicolas\",\"Rafael\",\"Theo\",\"Tobias\",\"Xaver\",\"Alina\",\"Lorenz\",\"Ida\",\"Levi\",\"Oscar\",\"Carla\",\"Leni\",\"Carlotta\",\"Johannes\",\"Korbinian\",\"Lucia\",\"Maya\",\"Michael\",\"Nico\",\"Nora\",\"Quirin\",\"Christian\",\"Isabel\",\"Kilian\",\"Bastian\",\"Frida\",\"Jasmin\",\"Linda\",\"Mina\",\"Nils\",\"Paulina\",\"Ali\",\"Alma\",\"Leonhard\",\"Liam\",\"Luise\",\"Rosalie\",\"Theodor\",\"Fiona\",\"Nele\",\"Viktoria\",\"Adam\",\"Arthur\",\"Constantin\",\"Dominik\",\"Erik\",\"Karl\",\"Luka\",\"Mateo\",\"Pauline\",\"Aaron\",\"Jana\",\"Louisa\",\"Miriam\",\"Mustafa\",\"Oliver\",\"Olivia\",\"Stella\",\"Timo\",\"Tom\",\"Zoe\",\"Elif\",\"Emilie\",\"Emir\",\"Eva\",\"Helene\",\"Josefine\",\"Leonardo\",\"Nina\",\"Romy\",\"Jonah\",\"Julie\",\"Lia\",\"Lotta\",\"Melina\",\"Pia\",\"Alexandra\",\"Frieda\",\"Isabelle\",\"Levin\",\"Manuel\",\"Mats\",\"Matteo\",\"Nisa\",\"Patrick\",\"Philippa\",\"Severin\",\"Vanessa\",\"Yusuf\",\"Anastasia\",\"Antonio\",\"Diego\",\"Flora\",\"Franz\",\"Frederik\",\"Georg\",\"Gustav\",\"Henry\",\"Jacob\",\"Jason\",\"Larissa\",\"Marla\",\"Martha\",\"Martin\",\"Medina\",\"Melisa\",\"Milena\",\"Mira\",\"Natalie\",\"Rosa\",\"Toni\",\"Viktor\",\"Aurelia\",\"Ava\",\"Deniz\",\"Ela\",\"Emilio\",\"Hannes\",\"Lennart\",\"Lorena\",\"Malik\",\"Milan\",\"Veronika\",\"Aylin\",\"Carl\",\"Cecilia\",\"Elina\",\"Hana\",\"Joel\",\"Josef\",\"Justus\",\"Karla\",\"Lars\",\"Luna\",\"Mara\",\"Marcel\",\"Melissa\",\"Meryem\",\"Mika\",\"Nick\",\"Noel\",\"Otto\",\"Rebecca\",\"Ronja\",\"Sami\",\"Tristan\",\"Valerie\",\"Alexandros\",\"Alisa\",\"Ana\",\"Bruno\",\"Chiara\",\"Christina\",\"Damian\",\"Elin\",\"Elise\",\"Eren\",\"Felicitas\",\"Fritz\",\"Joshua\",\"Leyla\",\"Livia\",\"Lotte\",\"Marc\",\"Marko\",\"Marlon\",\"Maxim\",\"Milla\",\"Noemi\",\"Philip\",\"Richard\",\"Robert\",\"Robin\",\"Selin\",\"Yasin\",\"Alea\",\"Alicia\",\"Amin\",\"Amira\",\"Annabelle\",\"Benno\",\"Christoph\",\"Clemens\",\"Colin\",\"Eleni\",\"Elsa\",\"Emelie\",\"Enes\",\"Fabio\",\"Florentine\",\"Giulia\",\"Ismail\",\"Leander\",\"Leandra\",\"Lilli\",\"Liv\",\"Marco\",\"Mark\",\"Markus\",\"Marta\",\"Mert\",\"Michelle\",\"Mikail\",\"Ole\",\"Selma\",\"Victor\",\"Zara\",\"Alessia\",\"Alex\",\"Alice\",\"Alissa\",\"Amar\",\"Amir\",\"Andreas\",\"Angelina\",\"Anika\",\"Bilal\",\"Carlos\",\"Cosima\",\"Filip\",\"Hugo\",\"Ilias\",\"Kristina\",\"Lana\",\"Lejla\",\"Lennard\",\"Lionel\",\"Mariam\",\"Mohamed\",\"Mona\",\"Natalia\",\"Nathan\",\"Nicole\",\"Nika\",\"Nikola\",\"Nikolas\",\"Peter\",\"Sina\",\"Smilla\",\"Sonja\",\"Stefan\",\"Tara\",\"Teresa\",\"Tuana\",\"Vivien\",\"Yara\",\"Zeynep\",\"Abdullah\",\"Ada\",\"Ahmed\",\"Alba\",\"Alessandro\",\"Anouk\",\"Arian\",\"August\",\"Berat\",\"Carlo\",\"Carolina\",\"Christopher\",\"Denis\",\"Elia\",\"Filippa\",\"Finja\",\"Ivan\",\"Jasper\",\"Kaan\",\"Karim\",\"Kira\",\"Konrad\",\"Liliana\",\"Lion\",\"Lola\",\"Madita\",\"Marlena\",\"Mathis\",\"Matthias\",\"Mattis\",\"Mehmet\",\"Milo\",\"Mohammad\",\"Niclas\",\"Niko\",\"Nikolaos\",\"Omar\",\"Talia\",\"Valentino\",\"William\",\"Youssef\",\"Agnes\",\"Alan\",\"Alexa\",\"Amalia\",\"Amanda\",\"Amelia\",\"Amina\",\"Anisa\",\"Anja\",\"Anne\",\"Anni\",\"Ariana\",\"Ariane\",\"Diana\",\"Emely\",\"Emilian\",\"Emirhan\",\"Eymen\",\"Franka\",\"Georgios\",\"Helen\",\"Ibrahim\",\"Ines\",\"Jule\",\"Kian\",\"Laurenz\",\"Laurin\",\"Leah\",\"Ledion\",\"Lennox\",\"Leona\",\"Lily\",\"Luana\",\"Lucie\",\"Magnus\",\"Malina\",\"Malte\",\"Mariella\",\"Marina\",\"Maryam\",\"Mathilde\",\"Nikita\",\"Ömer\",\"Roman\",\"Santiago\",\"Sofija\",\"Tamara\",\"Thomas\",\"Younes\",\"Adem\",\"Alva\",\"Annabell\",\"Armin\",\"Batuhan\",\"Cataleya\",\"Celina\",\"Cleo\",\"Cornelius\",\"Dalia\",\"Dario\",\"Diar\",\"Dila\",\"Dilara\",\"Eda\",\"Elly\",\"Emanuel\",\"Eric\",\"Esma\",\"Felicia\",\"Filipa\",\"Frederic\",\"Friederike\",\"Friedrich\",\"Heidi\",\"Helin\",\"Henrik\",\"Jack\",\"James\",\"Jannes\",\"Jannik\",\"Jannis\",\"Jayden\",\"Jeremy\",\"John\",\"Joseph\",\"Juliana\",\"Kaspar\",\"Kerem\",\"Kiara\",\"Koray\",\"Leonora\",\"Letizia\",\"Levent\",\"Lian\",\"Lilia\",\"Lilian\",\"Lovis\",\"Lucy\",\"Luke\",\"Marisa\",\"Merle\",\"Mohammed\",\"Muhammad\",\"Muhammed\",\"Nathaniel\",\"Neo\",\"Raffael\",\"Sam\",\"Samira\",\"Sarina\",\"Selim\",\"Selina\",\"Tabea\",\"Tasnim\",\"Tiago\",\"Timon\",\"Verena\",\"Vinzenz\",\"Vitus\",\"Yasmin\",\"Zoey\",\"Valerio\",\"Vivienne\",\"Léon\",\"Lucía\",\"Zoé\",\"Joy\",\"Elon\"],\"freq\":[166,124,109,109,108,103,103,99,99,93,89,82,81,80,78,77,77,76,75,71,71,71,67,66,65,65,64,63,62,62,61,60,59,58,57,56,55,53,53,53,52,52,52,51,51,50,50,50,49,49,49,48,48,47,47,47,46,46,45,44,43,43,43,42,42,42,42,41,41,41,40,40,40,40,39,39,37,36,35,35,34,33,33,33,33,32,32,32,31,31,31,31,30,30,30,30,30,29,29,29,28,27,27,27,27,27,27,26,26,25,25,25,24,24,23,23,23,23,23,23,23,23,23,22,22,22,21,21,21,21,21,21,21,20,20,20,20,20,20,20,19,19,19,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,8,8,5,5],\"fontFamily\":\"Segoe UI\",\"fontWeight\":\"bold\",\"color\":\"random-light\",\"minSize\":7,\"weightFactor\":0.5421686746987951,\"backgroundColor\":\"white\",\"gridSize\":0,\"minRotation\":-0.7853981633974483,\"maxRotation\":0.7853981633974483,\"shuffle\":true,\"rotateRatio\":0.4,\"shape\":\"circle\",\"ellipticity\":0.65,\"figBase64\":null,\"hover\":null},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el,x){\\n                        console.log(123);\\n                        if(!iii){\\n                          window.location.reload();\\n                          iii = False;\\n\\n                        }\\n  }\",\"data\":null}]}}</script>\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/wordcloud2-0.0.1/wordcloud.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/wordcloud2-0.0.1/wordcloud2-all.js\"></script>\n<script src=\"../../site_libs/wordcloud2-0.0.1/hover.js\"></script>\n<script src=\"../../site_libs/wordcloud2-binding-0.2.1/wordcloud2.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}