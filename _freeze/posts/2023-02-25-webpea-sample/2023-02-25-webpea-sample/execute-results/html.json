{
  "hash": "6ec124139206d4f55e5cd6ae00c3e29a",
  "result": {
    "markdown": "---\ntitle: \"Export plots in WebP format\"\nsubtitle: |\n  Since there's no \"built in\" way to export R graphs to WebP images, {webpea} offers a function to save single plots or to automate WebP export in quarto / Rmd documents.\ncategories: \n  - ggplot2\n  - experimental\n  - R\ndate: 2023-02-25\ncode-fold: false\nimage: webpea_hex.webp\nimage-alt: \"The hex sticker of the webpea package.\"\ncitation:\n  type: post-weblog\n---\n\n\n## Intoduction\n\nCommon forms to save plots in R include PNG or SVG. Both have their advantages, be it e.g. versatility or scalability. I learned about the [WebP image file format](https://en.wikipedia.org/wiki/WebP) recently and that it is supported by all major web browsers^[[https://caniuse.com/webp](https://caniuse.com/webp)]. The format offers considerable compression improvements over PNG with no apparent visual accuracy loss (in default settings).\n\n![Photo by <a href=\"https://unsplash.com/@jean_mi_g?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Jean-Michel GARCIA</a> on <a href=\"https://unsplash.com/de/fotos/bwKUJ3Y5JS4?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>](assets/peas.webp)\n\nThere are, of course, command line tools to convert image files for UNIX systems. There's ImageMagick for Linux and apparently SIPS for MacOS^[Thanks to [@hrbrmstr](https://vis.social/@hrbrmstr) for the [pointer](https://vis.social/@hrbrmstr/109927376664625632)].\nHowever this is not a practical approach for when you want to write an Rmd report or e.g. Quarto blog post, just like this one.\n\n::: {.column-margin}\n![The webpea package](webpea_hex.webp) [https://github.com/nucleic-acid/webpea](https://github.com/nucleic-acid/webpea)\n:::\n\nIn comes **{webpea}**, an experimantal R package to ease this process. It's just a small package and at this stage a simple wrapper function, that combines `{ggplot2}`'s `ggsave()` with the `{magick}` package. For the basic implementation, please refer to the manual or the [README](https://github.com/nucleic-acid/webpea).\n\n## The Old Way\n\nFirst let's draw a plot, the default way.\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| fig-width: 8\n#| fig-height: 6\n\nlibrary(webpea)\nlibrary(ggplot2)\n\nggplot(diamonds) +\n  aes(price, carat, color = as.factor(cut)) +\n  geom_point(alpha = 0.5, size = 3) +\n  theme_light()\n```\n````\n\n::: {.cell-output-display}\n![](2023-02-25-webpea-sample_files/figure-html/unnamed-chunk-1-1.png){width=768}\n:::\n:::\n\n\nIn \"default quarto rendering\" the above plot will be included as PNG with a resolution of 1536 x 1152 px and a size of 641,73 KB. \n\n## Automate WebP Export and Inclusion in the HTML output\nSince we want to have a WebP version, let's store the plot in a variable, thus it won't get printed to the output. `webpea::webpea()` returns the file path/name. We can use this to put the function directly into the \"src=\" argument of `htmltools::img()`.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\np <- ggplot(diamonds) +\n  aes(price, carat, color = as.factor(cut)) +\n  geom_point(alpha = 0.5, size = 3) +\n  theme_light()\n\nhtmltools::img(\n  src = webpea(\n    \"chunk1.webp\", \n    plot = p, \n    height = 6, \n    width = 8, \n    path_return = FALSE\n    ),\n  width = \"100%\"\n  )\n```\n````\n\n::: {.cell-output-display}\n```{=html}\n<img src=\"chunk1.webp\" width=\"100%\"/>\n```\n:::\n:::\n\n\nThe second plot is a WebP image with a resolution of 2400 x 1800 px and a file size of 154,31 KB. Even if the image has a slightly higher resolution, the file size is a quarter of the original PNG. \n\n## Conclusion\nWebP offers a great improvement in file compression without relevant quality loss. In fact, if you open both image files above with 100% zoom: can you spot significant differences? *I can't*, but I'd still be interested in your feedback. So let me know in the comments below.\n",
    "supporting": [
      "2023-02-25-webpea-sample_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}