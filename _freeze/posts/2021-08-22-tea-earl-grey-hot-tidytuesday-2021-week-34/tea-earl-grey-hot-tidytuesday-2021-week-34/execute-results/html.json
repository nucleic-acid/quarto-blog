{
  "hash": "9672b9e87737240f9d04d1ef787b8ef0",
  "result": {
    "markdown": "---\ntitle: \"Tea, Earl Grey, Hot\"\nsubtitle: |\n  My submission for #TidyTuesday 2021 week 34. A look at StarTrek TNG voice interactions with the Enterprise's computer. In this submission I focus on the 'locate' command to find someone on the ship.\ndate: 2021-08-26\ncategories:\n  - tidy tuesday\n  - R\n  - RegEx\nimage: res/preview.png\n---\n\n\n\n\n## The Task\n\nThis week's [#TidyTuesday](https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-08-17) dataset is all about *Star Trek The Next Generation*.\n\nIn particular, the data collected by [www.speechinteraction.org/TNG/](https://www.speechinteraction.org/TNG/) is about voice interactions of the characters with the ship's computer. While the dataset comprises all kinds of voice interactions (questions, commands and other utterances) I focus on the 'locate-command' alone.\n\nWith it, characters can locate other people on the ship, if they are looking for them.^[Handy, if you really need to find someone at any time, yet kind of creepy if you think about it.]\n\n## The way\n\n### Setup of the environment\n\nFirst let's load the required packages:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\nlibrary(\"ggrepel\")\nlibrary(\"ggdark\")\nlibrary(\"showtext\")\nlibrary(\"reactable\")\n```\n:::\n\n\nThen we need to setup the custom fonts for the plot. In this post I do not load the `jolly_theme.R`^[[check out this post](https://jollydata.blog/posts/2021-03-09-with-flying-colours/)].\n\nThe Star Trek related fonts come with the [`{trekfont}`-package](https://cran.r-project.org/web/packages/trekfont/).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfont <- c(\"StarNext\", \"TNGcast\")\npath <- system.file(paste0(\"fonts/\", font, \".ttf\"), package = \"trekfont\")\nfor (i in 1:2) font_add(font[i], path[i])\nfont_add_google(\"Open Sans\")\nfont_families()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"sans\"         \"serif\"        \"mono\"         \"wqy-microhei\" \"StarNext\"    \n#> [6] \"TNGcast\"      \"Open Sans\"\n```\n:::\n\n```{.r .cell-code}\nshowtext_auto()\n```\n:::\n\n\n### Data preparation\n\nIt all begins with the download of the #TidyTuesday dataset from github:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#load the data and store locally for future runs of the code\ntuesdata <- tidytuesdayR::tt_load(2021, week = 34)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> \tDownloading file 1 of 1: `computer.csv`\n```\n:::\n\n```{.r .cell-code}\ncomputer <- tuesdata$computer\n```\n:::\n\n\n### Count the voice commands\n\nCounting the number of location-commands is quite easy, as the dataset contains a column specifying who issues the command:\n\n::: {.column-page}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# count how often a character located someone else\nsearches_by_people <- computer %>%\n  # ignore interactions by the computer and ignore the Wake Word \"Computer\" itself\n  filter(sub_domain == \"Locate\", !str_detect(char, pattern = \"[Cc]omputer\"), type != \"Wake Word\")\n\nhead(searches_by_people) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n| name|char         |line                                                                                                                                   |direction                                                                                                               |type     |pri_type |domain   |sub_domain |nv_resp |interaction                                                                                                                      |char_type |is_fed |error | value_id|\n|----:|:------------|:--------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------|:--------|:--------|:--------|:----------|:-------|:--------------------------------------------------------------------------------------------------------------------------------|:---------|:------|:-----|--------:|\n|  102|Young Ensign |You must be new to these galaxy class starships  sir. (puts hand on the black surface  saying) Tell me the location of Commander Data. |At the touch and the words 'Tell me' the black surface comes alive with light patterns showing appropriate information. |Command  |Command  |InfoSeek |Locate     |FALSE   |Tell me the location of Commander Data.                                                                                          |Person    |TRUE   |FALSE |      421|\n|  110|Riker        |Computer  tell me Captain Picard's location!                                                                                           |NA                                                                                                                      |Command  |Command  |InfoSeek |Locate     |FALSE   |Computer  tell me Captain Picard's location!                                                                                     |Person    |TRUE   |FALSE |      326|\n|  116|Data         |Computer  where are the captain and Commander Riker?                                                                                   |NA                                                                                                                      |Question |Question |InfoSeek |Locate     |FALSE   |Computer  where are the captain and Commander Riker?                                                                             |Person    |TRUE   |FALSE |      236|\n|  116|Picard       |(beat  thinks) Locate Lieutenant Commander Data.                                                                                       |NA                                                                                                                      |Command  |Command  |InfoSeek |Locate     |FALSE   |Locate Lieutenant Commander Data.                                                                                                |Person    |TRUE   |FALSE |      289|\n|  126|Ralph        |Ah... let's see. (to computer) Ah... I want to go to a... the... ah... (he shrugs; then to himself:) Where would the captain be?       |To his astonishemnt  the computer answers:                                                                              |Question |Question |InfoSeek |Locate     |FALSE   |Ah... let's see. (to computer) Ah... I want to go to a... the... ah... (he shrugs; then to himself:) Where would the captain be? |Person    |TRUE   |FALSE |      367|\n|  126|Ralph        |Ah... let's see. (to computer) Ah... I want to go to a... the... ah... (he shrugs; then to himself:) Where would the captain be?       |To his astonishemnt  the computer answers:                                                                              |Question |Question |IoT      |Locate     |FALSE   |Ah... let's see. (to computer) Ah... I want to go to a... the... ah... (he shrugs; then to himself:) Where would the captain be? |Person    |TRUE   |FALSE |      367|\n:::\n:::\n\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsearches_by_people_count <- searches_by_people %>%\n  count(char, sort = TRUE) %>%\n  mutate(\n    char = str_to_lower(char),\n\n    # use last name for later joining\n    char = ifelse(char == \"beverly\", \"crusher\", char),\n    char = ifelse(char == \"geordi\", \"la forge\", char)\n  )\n\nsearches_by_people_count |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|char         |  n|\n|:------------|--:|\n|picard       | 18|\n|riker        |  9|\n|data         |  6|\n|crusher      |  4|\n|worf         |  4|\n|mrs. troi    |  3|\n|la forge     |  2|\n|ralph        |  2|\n|troi         |  2|\n|young ensign |  1|\n:::\n:::\n\n\n\n\nChecking, how often someone is being looked for is not as straight forward. Due to time limitations I took a shortcut and compromised possible mis-counts. I basically filter the voice commands for occurrences of the main characters' names.\n\n::: {.column-margin}\nAs the number of rows with location commands is <100 I skimmed the commands for the names used to locate people and put these in a vector.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define People of interest (this is not a complete cast list, but the result of skimming ~90 entries)\npeople <- str_to_lower(c(\n  \"data\", \"picard\", \"captain\", \"riker\", \"pulaski\", \"Goss\", \"Tam Elbrun\", \"Barclay\",\n  \"Dalen Quaice\", \"Hill and Selar\", \"Worf\", \"La Forge\", \"Vash\", \"Diana\", \"Troi\", \"Crusher\", \"Ensign Ro\",\n  \"Alexander Rozhenko\", \"Uhnari\", \"Morag\"\n))\n\n# Create a Regex pattern by collapsing the vector with the \"or\" operator\npeople_pattern <- paste0(people, collapse = \"|\")\n\n\npeople_searched <- searches_by_people %>%\n  mutate(\n    # make the interactions strings to lower case\n    interaction_lower = str_to_lower(interaction),\n\n    # reduce the interactions strings to the searched person\n    # e.g. from \"computer, locate commander riker\" --> \"riker\" is extracted.\n    # Caution: This is not the best / generalizable way, but a rather hacky approach\n    # due to limited time. It works for this use case / dataset.\n    person_of_interest = str_extract(interaction_lower, pattern = people_pattern)\n  ) %>%\n  select(interaction, person_of_interest) %>%\n  filter(!is.na(person_of_interest)) %>%\n  count(person_of_interest, sort = TRUE) %>%\n  mutate(person_of_interest = ifelse(person_of_interest == \"captain\", \"picard\", person_of_interest))\n\npeople_searched |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|person_of_interest |  n|\n|:------------------|--:|\n|picard             |  7|\n|data               |  5|\n|la forge           |  5|\n|riker              |  4|\n|barclay            |  3|\n|worf               |  3|\n|alexander rozhenko |  2|\n|dalen quaice       |  2|\n|troi               |  2|\n|crusher            |  1|\n|ensign ro          |  1|\n|goss               |  1|\n|hill and selar     |  1|\n|morag              |  1|\n|pulaski            |  1|\n|tam elbrun         |  1|\n|vash               |  1|\n:::\n:::\n\n\n\n### Enriching the dataset\n\nI created a csv containing the glyphs used for the characters of interest in the TNGcast-font. In Addition I took the appropriate Federation Uniform Colors from the `{trekcolors}` package.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrelevant <- read_csv2(\"res/relevant.csv\", col_names = TRUE)\n\n# let's take a look:\nrelevant %>%\n  filter(!is.na(char)) %>%\n  reactable(\n    # global reactable options\n    defaultSorted = \"char\",\n    # defaultSortOrder = \"desc\",\n    searchable = TRUE,\n    highlight = TRUE,\n    rowStyle = list(cursor = \"pointer\"),\n    theme = reactableTheme(\n      highlightColor = \"#1BC7DC\"\n    ),\n\n    # formatting individual columns\n    columns =\n      list(\n        char = colDef(\n          name = \"Character Name\",\n          sortable = TRUE,\n          minWidth = 150\n        ),\n        char_label = colDef(\n          name = \"Label glyph\",\n          minWidth = 50,\n          sortable = TRUE\n        ),\n        char_col = colDef(\n          name = \"Uniform color HEX\",\n          minWidth = 100,\n          sortable = TRUE,\n          style = function(value) {\n            list(background = value)\n          }\n        )\n      )\n  )\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-963e3b237dcc50317a11\" class=\"reactable html-widget\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-963e3b237dcc50317a11\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"char\":[\"Alexander Rozhenko\",\"Crusher\",\"Data\",\"Picard\",\"La Forge\",\"Pulaski\",\"Riker\",\"Troi\",\"Worf\",\"Barclay\"],\"char_label\":[\"a\",\"c\",\"d\",\"j\",\"l\",\"p\",\"r\",\"t\",\"w\",\"z\"],\"char_col\":[\"#CCCCCC\",\"#1A6384\",\"#AD722C\",\"#5B1414\",\"#AD722C\",\"#1A6384\",\"#5B1414\",\"#582f5e\",\"#AD722C\",\"#AD722C\"]},\"columns\":[{\"accessor\":\"char\",\"name\":\"Character Name\",\"type\":\"character\",\"sortable\":true,\"minWidth\":150},{\"accessor\":\"char_label\",\"name\":\"Label glyph\",\"type\":\"character\",\"sortable\":true,\"minWidth\":50},{\"accessor\":\"char_col\",\"name\":\"Uniform color HEX\",\"type\":\"character\",\"sortable\":true,\"minWidth\":100,\"style\":[{\"background\":\"#CCCCCC\"},{\"background\":\"#1A6384\"},{\"background\":\"#AD722C\"},{\"background\":\"#5B1414\"},{\"background\":\"#AD722C\"},{\"background\":\"#1A6384\"},{\"background\":\"#5B1414\"},{\"background\":\"#582f5e\"},{\"background\":\"#AD722C\"},{\"background\":\"#AD722C\"}]}],\"searchable\":true,\"defaultSorted\":[{\"id\":\"char\",\"desc\":false}],\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"highlight\":true,\"rowStyle\":{\"cursor\":\"pointer\"},\"theme\":{\"highlightColor\":\"#1BC7DC\"},\"dataKey\":\"6007cfe12308f8f81b0510b0e43cc3a0\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nAs last step before plotting the data is combined:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwhereabouts <- searches_by_people_count %>%\n  full_join(people_searched, by = c(\"char\" = \"person_of_interest\")) %>%\n  rename(searching = n.x, searched = n.y) %>%\n  mutate(char = str_to_title(char)) %>%\n  replace_na(list(searching = 0L, searched = 0L)) %>%\n  inner_join(relevant, by = \"char\")\n```\n:::\n\n\n\n## The result\n\nNow, that the data has been prepared the plot can be drawn.\n\n::: {.column-page}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwhereabouts %>%\n  ggplot(aes(searching, searched)) +\n  geom_point(size = 3) +\n  geom_label_repel(\n    aes(label = char_label, color = char_col),\n    box.padding = 0.5,\n    label.padding = 0.5,\n    max.time = 1,\n    max.iter = 100000,\n    family = \"TNGcast\",\n    size = 30\n  ) +\n  labs(\n    title = \"Where is Captain Picard?\",\n    subtitle = \"How often did Characters in 'StarTrek TNG' ask the computer to locate someone on the Starship Enterprise\\nvs. how often are they being located via the computer.\\n\",\n    x = \"Times searching someone\",\n    y = \"Times being searched\",\n    caption = \"\\n@c_gebhard | #TidyTuesday Week 34 (2021)\\nData source: http://www.speechinteraction.org/TNG/\"\n  ) +\n  coord_trans(x = \"sqrt\", y = \"sqrt\") +\n  scale_x_continuous(breaks = c(0:6, 10, 15, 18)) +\n  scale_y_continuous(breaks = c(1:7)) +\n  scale_color_identity() +\n  dark_theme_minimal() +\n  theme(\n    plot.title = element_text(\n      family = \"StarNext\",\n      face = \"bold\",\n      size = rel(3),\n      hjust = 0,\n      vjust = 5\n    ),\n    plot.subtitle = element_text(\n      family = \"Open Sans\",\n      size = rel(1.3),\n      hjust = 0\n    ),\n    plot.caption = element_text(\n      size = rel(1.1),\n      face = \"italic\",\n      hjust = 1\n    ),\n    plot.caption.position = \"plot\",\n    plot.margin = margin(1.5, 0.4, 0.4, 0.4, unit = \"cm\"),\n    axis.title = element_text(\n      face = \"bold\",\n      size = rel(1.3)\n    ),\n    axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),\n    axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0), angle = 90),\n    axis.text = element_text(\n      size = rel(1.3)\n    )\n  )\n```\n\n::: {.cell-output-display}\n![Characters in StarTrek The Next Generatio (TNG) frequently interact with the shep's computer via voice commands. One of the computer's functions is to locate a person on the ship. Within the speechinteractions.org/TNG/ dataset, these 'locate-commands' were filtered and analysed. The characters are plotted in regard to how often the used the 'locate-command' to find someone vs. how often they are being located via the computer.](tea-earl-grey-hot-tidytuesday-2021-week-34_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' fig-alt='Plot title: \\'Where is Captain Picard?\\' A scatterplot showing how often Characters in Star Trek The Next Generation are using a voice command command to find someone via the ship\\'s computer vs how often they are being located by someone else via the computer. The plot shows, that Captain Picard is the character who is searched for most often, but also the one using the locate command most often.' width=100%}\n:::\n\n```{.r .cell-code}\nggsave(\"tt21-34_picard.png\", dpi = 96, height = 8, width = 10)\n```\n:::\n\n\n:::\n\nNote that the [\"officially\" submitted plot](https://twitter.com/c_gebhard/status/1429909416346804226?s=20)^[aka the tweeted version] differs from the one above. To meet the deadline I submitted a simpler version with a simple scatterplot.\n\n## Comments\nBeing a Star Trek fan I really enjoyed working on the dataset. In this post I shared what I learned in regard to custom fonts and using the `{reactable}` package. I hope it was informative to read. If there's something missing, let me know:\n\n",
    "supporting": [
      "tea-earl-grey-hot-tidytuesday-2021-week-34_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/panelset-0.2.6/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/panelset-0.2.6/panelset.js\"></script>\n<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/reactable-binding-0.3.0/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}