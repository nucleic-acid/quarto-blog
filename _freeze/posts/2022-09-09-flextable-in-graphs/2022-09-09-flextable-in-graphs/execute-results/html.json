{
  "hash": "4b7b8610ff8d623e8c58343056c4c652",
  "result": {
    "markdown": "---\ntitle: \"Integrating tables in plots\"\nsubtitle: |\n  Including a table in a graph can be very informative. Unfortunatley that wasn't very straight forward in {ggplot2} - until now. I revisit one of my plots for #30DayChartChallenge to showcase how to include a {flextable} into a plot using {patchwork}.\ncategories: \n  - maps\n  - tables\n  - R\ndate: 2022-08-06\ncode-fold: false\nimage: preview.jpg\ncitation:\n  type: post-weblog\n---\n\n\n## Intoduction\n\nBack in April 2022, I was able to submit a few plots to the [#30DayChartChallenge](https://twitter.com/30DayChartChall) on Twitter. On Day 4 I needed to include two tables in the plot to list / highlight the head/tail of the countries regarding forestation development.\n\n![The originally submitted chart of April 4th, 2022](2022_04_comp_flora.png)\n\nI couldn't find any way to directly integrate a table into a plot object^[there might have been, but my search was unsuccessful]. The 'solution' that worked to meet the deadline was to \n\n1. render the tables with `{gt}`/`{gtExtras}`, \n2. export them as PNG to disk, \n3. read the PNG back in,\n4. set it as background image of a otherwise blank plot and then \n5. integrate this plot into the main map.\n\nRecently `{flextable}` [introduced an option](https://twitter.com/DavidGohel/status/1568212556623527937?s=20&t=NN-CwzdbOZDSjdMGXG179Q) to output a table as \"grid graphic\", which is directly interoperable with `{ggplot2}` and `{patchwork}`.\n\nIn this post I revise my initial plot to showcase this approach to include a table in a `{ggplot2}` chart. At the time of writing, this was only available in the development version >= 7.4 of the package.\n\n:::{.callout-note collapse=false appearance='default' icon=true}\n## Note\nWhile revising, I changed the color-palette to a **colorblind friendly palette**. I initially used green to match the day's theme of 'flora'. I didn't realize, that I ended up with a red/green diverging palette that made it really hard for some viewers to differentiate.\n\nImage credit for the preview picture: <a href=\"https://unsplash.com/@hudsoncrafted?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Debby Hudson</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n  \n:::\n\n:::{.callout-important collapse=true appearance='default' icon=true}\n## Yet Another Note\nThis post does not compare the features or qualities of either table packages in general. This is a very specific use-case where `{flextable}` now offers a very handy feature.\n:::\n\n## Setup and Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries needed for both ways\nlibrary(\"tidyverse\")\nlibrary(\"rnaturalearth\")\nlibrary(\"rnaturalearthdata\")\nlibrary(\"ggtext\")\nlibrary(\"patchwork\")\n\nlibrary(\"showtext\")\nfont_add_google(\"Cabin Sketch\")\nfont_add_google(\"Open Sans\")\nshowtext::showtext_opts(dpi = 300)\nshowtext_auto()\n```\n:::\n\n\n## Read and prepare data\nThe data comes from [World Bank](https://worldbank.org), published under the CC BY 4.0 International License. The data was obtained on 2022-03-23. [Forest area is land under natural or planted stands of trees of at least 5 meters in situ, whether productive or not, and excludes tree stands in agricultural production systems (for example, in fruit plantations and agroforestry systems) and trees in urban parks and gardens.]{.aside}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read data\nforestation <- read_csv(here::here(\"data\", \"worldbank\", \"forestation_tidy.csv\")) |>\n  pivot_wider(id_cols = c(country_name, country_code), names_from = Year, values_from = surface, names_prefix = \"y\") |>\n  mutate(surface_diff = y2020 - y2000)\n\n# read map data from rnaturalearth\nworld <- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# join forestation data to the map data\nworld_forestation <- world |>\n  left_join(forestation, by = c(\"iso_a3\" = \"country_code\")) |>\n  filter(iso_a3 != \"ATA\") # Antactica is removed due to missing data to save space on the map\n```\n:::\n\n\n## Plot the map and the legend\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot the world\npworld <- ggplot(data = world_forestation) +\n  geom_sf(aes(fill = surface_diff), size = 0.1) +\n  scale_fill_gradient2(low = \"#DC3220\", high = \"#005AB5\", mid = \"#EEEEEE\", na.value = \"#FFFFFF\") +\n  theme_classic() +\n  labs(\n    title = \"<b>Global Forest Area Development 2000-2020<b>\",\n    subtitle = \"Change of natural or planted forest area (in % of land area) over the last two decades. Some<br>countries lost/destroyed wooded area by up to ~17% of their landmass. Others increased<br>forest coverage by up to ~15%. The top 6 in each direction are listed in the tables.\"\n  ) +\n  theme(\n    text = element_text(family = \"Open Sans\"),\n    plot.title = element_markdown(family = \"Cabin Sketch\", size = 22),\n    plot.subtitle = element_markdown(family = \"Open Sans\", size = 12, lineheight = 0.4),\n    axis.line = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    legend.position = \"none\"\n  )\n\n# plot the legend plot\nlegend_plot <- world_forestation |> \n  filter(!is.na(surface_diff)) |> \n  ggplot() +\n  aes(\n    x = reorder(iso_a3, -surface_diff), \n    y = surface_diff,\n    fill = surface_diff\n  ) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient2(low = \"#DC3220\", high = \"#005AB5\", mid = \"#EEEEEE\") +\n  scale_y_continuous(\n    breaks = c(-15, -10, -5, 0, 5, 10, 15),\n    labels = c(\"-15\", \"-10\", \"-5\", \"0\", \"5\", \"10\", \"15\")\n  ) +\n  labs(\n    caption = \"Change of the countries' Forest areas<br>(sorted by % of land area)\"\n  ) +\n  theme_classic() +\n  theme(\n    text = element_text(family = \"Open Sans\"),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text.x = element_blank(),\n    panel.grid.major.y = element_line(color = \"black\", size = 0.1),\n    panel.background = element_blank(),\n    plot.background = element_blank(),\n    legend.position = \"none\"\n  ) +\n  theme( # text styling\n    plot.title = element_blank(),\n    plot.caption = element_markdown(family = \"Open Sans\", size = 8, hjust = 0.5, lineheight = 0.4),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.y = element_markdown(family = \"Open Sans\", size = 10)\n  )\n\n# define plot layout for later patchwork\nlayout <- \"\nAAAAAA\nAAAAAA\nAAAAAA\n#BCCD#\n\"\n```\n:::\n\n\n## Select head and tail of the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# countries with largest increase in surface area\ntop6 <- as_tibble(world_forestation) |> \n  filter(!is.na(surface_diff)) |> \n  select(name, surface_diff) |> \n  arrange(desc(surface_diff)) |> \n  mutate(surface_diff = round(surface_diff, 2)) |> \n  head(6) \n\n# countries with lowest increase / maximum reduction of surface area\nlow6 <- as_tibble(world_forestation) |> \n  filter(!is.na(surface_diff)) |> \n  select(name, surface_diff) |> \n  arrange(surface_diff) |> \n  mutate(surface_diff = round(surface_diff, 2)) |> \n  head(6) |> \n  arrange(desc(surface_diff)) \n```\n:::\n\n\n## Integrating the tables\n\nNext you'll find the two ways to include tables into a patchworked chart.\n\n::: {.panel-tabset group=\"table-package\"}\n\n### {flextable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# libraries needed for this variant\nlibrary(\"flextable\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# obtain maximum and minimum values for the color scale\na.max <- max(top6$surface_diff)\na.min <- min(low6$surface_diff)\n\n# set font size\nset_flextable_defaults(\n  font.size = 8\n)\n\n# render head and tail of the list as flextable with conditional coloring\ntop6.flex <- top6 |> \n  flextable::flextable() |> \n  bg(\n    j =2, \n    bg = scales::col_numeric(\n      palette = c(\"#DC3220\",\"#EEEEEE\", \"#005AB5\"),\n      domain = c(a.min, a.max)\n      )\n    ) |> \n  delete_part(part = \"header\") |> \n  border_remove() |> \n  autofit() |> \n  gen_grob(fit = \"auto\", scaling = \"min\", autowidths = FALSE,\n           just = \"center\") \n\nlow6.flex <- low6 |> \n  flextable::flextable() |> \n  bg(\n    j =2,\n    bg = scales::col_numeric(\n      palette = c(\"#DC3220\",\"#EEEEEE\", \"#005AB5\"),\n      domain = c(a.min, a.max)\n      )\n    ) |> \n  delete_part(part = \"header\") |> \n  border_remove() |> \n  autofit() |> \n  gen_grob(fit = \"auto\", scaling = \"min\", autowidths = FALSE,\n           just = \"center\")\n\n# compose patchwork\npatched.flex <- pworld + top6.flex + legend_plot + low6.flex +\n  plot_layout(design = layout) + \n  plot_annotation(\n    caption = \"<br><span >DataViz by @c_gebhard  | #30DayChartChallenge 2022, Day 04 <b>REVISED 09/2022</b><br>Data by WorldBank.org under CC BY 4.0 Interntional License</span>\",\n    theme = theme(\n      plot.caption = element_markdown(family = \"Open Sans\", size = 8),\n    )\n  )\n\n# save patchwork\nggsave(\n  here::here(\"posts\", \"2022-09-09-flextable-in-graphs\", \"2022_04_rev.png\"), \n  plot = patched.flex, \n  height = 6, \n  width = 8, \n  dpi = 300\n  )\n```\n:::\n\n\n\n### {gt} + {gtextras}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# libraries needed for this variant\nlibrary(\"gt\")\nlibrary(\"gtExtras\")\nlibrary(\"png\")\nlibrary(\"ggpubr\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# render gt tables\ngood6 <- top6 |> \n  gt()  |> \n  gt_color_rows(surface_diff, \n                palette = c(\"#EEEEEE\", \"#005AB5\"),\n                domain = c(0, 14.94)) |> \n  tab_options(\n    column_labels.hidden = TRUE\n  )\n\nbad6 <- low6 |> \n  gt()  |> \n  gt_color_rows(surface_diff, \n                palette = c(\"#DC3220\",\"#EEEEEE\"),\n                domain = c(0, -17.34)) |> \n  tab_options(\n    column_labels.hidden = TRUE\n  )\n\n# store gt tables as PNGs\ngtsave(\n  bad6, \n  here::here(\"posts\", \"2022-09-09-flextable-in-graphs\", \"bad6.png\"), \n  zoom = 10\n  )\ngtsave(\n  good6, \n  here::here(\"posts\", \"2022-09-09-flextable-in-graphs\", \"good6.png\"), \n  zoom = 20\n  )\n\n# read PNGs from file\nbad6_img <- readPNG(\n  here::here(\"posts\", \"2022-09-09-flextable-in-graphs\", \"bad6.png\"), \n  native = TRUE\n  )\ntop6_img <- readPNG(here::here(\"posts\", \"2022-09-09-flextable-in-graphs\", \"good6.png\"), native = TRUE)\n\n# set PNGs as background of otherwise empty plots\nbad6_plot <- ggplot() +\n  background_image(bad6_img) +\n  coord_fixed()\ntop6_plot <- ggplot() +\n  background_image(top6_img) +\n  coord_fixed()\n\n# compose patchwork\npatched <- pworld + top6_plot + legend_plot + bad6_plot +\n  plot_layout(design = layout) + \n  plot_annotation(\n    caption = \"<br><span>DataViz by @c_gebhard  | <b>#30DayChartChallenge 2022, Day 04</b> | Data by WorldBank.org under CC BY 4.0 Interntional License</span>\",\n    theme = theme(\n      plot.caption = element_markdown(family = \"Open Sans\", size = 8),\n    )\n  )\n  \n# save patchwork\nggsave(\n  here::here(\"posts\", \"2022-09-09-flextable-in-graphs\", \"2022_04.png\"), \n  plot = patched, \n  height = 6, \n  width = 8, \n  dpi = 300\n  )\n```\n:::\n\n\n:::\n\nTo be honest, the number of code lines is not that much different. However, if you look at the steps/packages needed, there is a clear advantage of the `{flextable}` variant.\nThe improvement becomes even more apparent, when you look at the output.\n\n## Compare the output\nThese are the rendered charts from the above code. The **first image**^[top or left, depending on your screen size] is the `{gt}` version, that was also [submitted](https://twitter.com/c_gebhard/status/1510867009113923588) to the `#30DayChartChallenge` (except this one is with colorblind friendly colors). The table is pixelated and the aspect ratio somewhat distorted, so that the text doesn't look very sharp. Obviously you could improve this by refining the layout, so that the table PNGs don't get distorted, the DPIs of the table PNGs could be improved, etc. But all this means manual adjustment, that needs to be repeated, once you change the overall chart layout or rearrange the patched-subplots.\n\nThe **second figure** is the `{flextable}` variant, that overcomes these issues by including the tables into the plot object and thus the output is rendered with the same PNG settings as the rest of the plot. Sure, there are minor issues, that I could not fix at the moment either^[e.g. check the vertical text alignment of the first column in the tables, they were correct when plotting the tables alone, but were messed up after inclusion in patchwork.], but the overall look is much better. And as I haven't used `{flextable}` before, there might be ways to properly fix these issues quickly, that I don't (yet) know of.\n\n:::{.column-screen-inset-shaded}\n::: {.grid}\n\n::: {.g-col-12 .g-col-md-6}\n![](2022_04.png)\n:::\n\n::: {.g-col-12 .g-col-md-6}\n![](2022_04_rev.png)\n:::\n\n::: \n\n\n:::\n\n\n## Conclusions\nBoth, `{flextable}` and `{gt}` are powerful table tools. Both have a vast variety of options and neither is 'generally better'.\nThe new feature in `{flextable}` makes inclusion in graphs much more handy and allows for a higher quality outcome compared to the above workflow of saving the tables as PNG and then including that in the plot.\n\nIf you know of other ways to accomplish this task, please let me know in the comments. I'd be happy to learn other ways to use tables in charts!",
    "supporting": [
      "2022-09-09-flextable-in-graphs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}