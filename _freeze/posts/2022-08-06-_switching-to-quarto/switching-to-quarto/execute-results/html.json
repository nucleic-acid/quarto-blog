{
  "hash": "1d8802c5b3de2e54430bdcec722cad71",
  "result": {
    "markdown": "---\ntitle: \"Switching to quarto\"\nsubtitle: |\n  I recently ported my blog to quarto. In this post I highlight the key features, that I like about quarto and that I implemented for this website.\ncategories: \n  - meta\ndate: 2022-08-06\ncode-fold: false\n---\n\n\n## Introduction\n\n`#Rstats` twitter is full of [@quarto_pub](https://twitter.com/quarto_pub) lately. Seeing this new framework only as a successor of Rmarkdown would do it injustice. It is developed by [RStudio](https://www.rstudio.com)^[or [posit](https://posit.co)] and aimed to allow scientific publishing of many sorts: reports for print, interactive documents, presentations, websites ... and blogs! \n\nI made the choice to switch this blog over from `{distill}` as quarto implemented many small improvements that were hard/impossible to implement with `{distill}`.\n\n> \"QuartoÂ® is an open-source scientific and technical publishing system built on Pandoc\" -- quarto.org\n\nI will describe in detail, how I got from the minimal/default quarto blog^[that is created when you set up a quarto website project] to what this blog looks and works now. This includes: adding a dark theme, tweak both themes with (S)CSS, additional custom pages for projects, data viz gallery, quarto extensions, font self-hosting and many other smaller things.\n\nIn this post I will **not** give a thorough walk-through of how to build a quarto website from scratch or how to port a `{distill}` blog to quarto. There are several great blog posts who do this already and which I used as guides. Those are\n\n- [Porting a distill blog to quarto](https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/) by [Danielle Navarro](https://twitter.com/djnavarro)\n- [The ultimate guide to starting a Quarto blog](https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html) by [Albert Rapp](https://albert-rapp.de)\n- and of course the extraordinarily good [official documentation](https://quarto.org/docs/websites/website-blog.html) of quarto.\n\nIf you like how jollydata.blog looks and feels and want to adapt some of that, I recommend following one of the posts above to get you started and then coming back here to take some of the details that you want.\n\n\n:::{.callout-note collapse=false appearance='default' icon=true}\n## Note before continuing\nIn the following chapters I assume that you know the project structure of a quarto website/blog, and have a rough understanding of what some of the files such as `_quarto.yml` or `_metadata.yml` do.\n:::\n\n## Themes\nQuarto comes with a [large number of themes](https://quarto.org/docs/websites/website-blog.html#themes) for websites, that allow for easy changing of the overall look and feel. The themes come from the [bootswatch project](https://bootswatch.com) and cover a wide range of styles, from colorful to white, from round to sharp, from light to dark,...Nearly everyone should find something to their liking. When the themes don't hit just the spot you want, it is easy to tweak them -- at least if you have some basic CSS or SCSS knowledge.\n\n### Selecting the theme(s)\nAs main theme I chose \"litera\" with a clean and mostly white design. To set the theme, simply specify its name in the `_quarto.yml` file:\n\n``` yaml\nformat:\n  html:\n    theme: litera\n```\n\nEven if I enjoy the bright design, a reader might prefer a dark theme. Fortunately quarto offers a built-in theme-switcher in the Navbar. This activates the alternate theme on all pages of the blog, as long as the reader switches back. To activate it I simply had to explicitly define a light and a dark theme (see below on the left), which (after rendering) puts a switch-icon in the navbar (see below on the right):\n\n:::: {.columns}\n\n::: {.column width='40%'}\n``` yaml\nformat:\n  html:\n    theme: \n      light: litera\n      dark: superhero\n```\n:::\n\n::: {.column width='10%'}\n\n:::\n\n::: {.column width='50%'}\n\n![Screenshot from the navbar highlighting the theme sitcher icon.](assets/theme_switcher.png)\n\n:::\n\n::::\n\n### Aligning the themes\nI could have stopped here and enjoyed the view already. However, minute differences between the bright and dark themes caught my eye, namely default theme colors and element borders. If you compare the two themes, below you'll notice different shapes and colors:\n\n![Design sample from the litera theme. (screenshot from https://bootswatch.com/litera/)](assets/litera_buttons.png)\n\n![Design sample from the superhero theme. (screenshot from https://bootswatch.com/superhero/)](assets/superhero_buttons.png)\n\nSwitching themes would therefore also change the form and colors of the buttons, search boxes, highlights, callout-boxes etc.\nTo align the styles I had to specify certain SCSS variables. \n\nEach bootswatch theme comes with a set of default variables that define colors, sizes, margins, borders, shapes and so on. All themes use the same variable names for each design element. By specifying certain variables in a custom add-on theme file, I could override design details in both themes at the same time and therefore align the look and feel. To do this, one can add a file to the project directory e.g. `mystyle.scss` with the following basic content:\n\n``` scss\n/*-- scss:defaults --*/\n\n// default values go here (e.g. certain variable values that should replace theme-defaults)\n\n/*-- scss:rules --*/\n\n// further CSS rules for specific HTML tags go here\n```\n\nTo align \"litera\" and \"superhero\" I took the colors from superhero and added them to my custom `jollydata.scss` file. This overrides the default \"litera\" theme-colors. In addition I removed any \"border-radius\", which added the round corners on buttons and other website elements:^[This is all a matter of taste and I like sharp edges more.]\n\n``` scss\n/*-- scss:defaults --*/\n\n// Colors\n\n$red:     #d9534f !default;\n$yellow:  #ffc107 !default;\n$green:   #5cb85c !default;\n$cyan:    #1bc7dc !default;\n\n$success:       $green !default;\n$info:          $cyan !default;\n$warning:       $yellow !default;\n$danger:        $red !default;\n\n// Button styling\n$btn-border-radius:           0em !default;\n$btn-border-radius-lg:        0em !default;\n$btn-border-radius-sm:        0em !default;\n\n/*-- scss:rules --*/\n\n// remove radius of the large buttons on the about page\ndiv.quarto-about-trestles .about-entity .about-link {\n  border-radius: 0;\n}\n\n// remove radius on the bootstrap \"cards\" element (more on that later)\n.card {\n  border-radius: 0;\n}\n\n```\n\nTo include these adjustments to the blog I added the custom SCSS file to my `_quarto.yml` like so:\n\n``` yaml\nformat:\n  html:\n    theme: \n      light: [litera, jollydata.scss]\n      dark: [superhero, jollydata.scss]\n```\n\n### Tweaking the themes even further\nApart from the above I made several small adjustments, mostly going below the `/*-- scss:rules --*/`. Instead of detailing all of that, I'll explain how I proceeded with two examples:\n\nTo specify **default variables** I looked through the variable list on the theme's website. When you download and look at the `_variables.scss`, you can see what you can adapt to your liking:  \n\n![Screenshot from https://bootswatch.com/litera/](assets/litera_details.png)\n\nThese defaults (that go to the `/*-- scss:defaults --*/` part) could be e.g. `$font-size-base`, `$body-color`, `$headings-font-weight`, etc.\n\nTo change **specific HTML elements**, I right click the element on the previewed blog in my browser and \"examine\" them in my browser's \"devtools\". They tell me the class of the object. In this case the figure caption:\n![Screenshot of a screenshot included in a chapter above with a tooltip from the chromium developer tools. (the original screenshot is from https://bootswatch.com/litera/).](assets/devtools.png)\n\nUnder `/*-- scss:rules --*/` I can then add classic CSS rules to define the look. For figure captions I chose a smaller font size:\n\n``` scss\n.figure-caption {\n  font-size: 0.8rem;\n}\n```\n  \n### BYOF (bring your own font)\nBootswatch themes come with default fonts. I wanted to give jollydata.blog a unique look. The blog's main font now is [Sora](https://fonts.google.com/specimen/Sora?query=Sora). It has a characteristic and sharp look, that I like, quite similar to [Atkinson Hyperlegible](https://fonts.google.com/specimen/Atkinson+Hyperlegible?query=Atkinson). In the legacy `{distill}` version of my blog I had two different fonts (Bitter and Open Sans) to style headings and body text respectively.\n\nIn my opinion Sora presents different typographic features at body text size and at heading size that gives enough contrast while keeping a unified look across all text elements.\n\nTo embed a font in your custom `.scss` file you can link to Google Fonts, which is very convenient to implement:\n\n``` scss\n/*-- scss:defaults --*/\n\n// import google fonts\n@import url('https://fonts.googleapis.com/css2?family=Courier+Prime&family=Fira+Code&family=Roboto+Mono:wght@300;400&family=Sora:wght@300;400;500;600;700;800&display=swap');\n\n// use Sora font if available\n$font-family-sans-serif:  \"Sora\", sans-serif !default;\n\n```\n\nAnd that's it. The website should now use the above font as default. **However, I chose to self-host the fonts.** That means that I put them on my hosted web-space and tell the readers browsers' to pull them from there (same as the rest of the website) instead of from fonts.google.com.\n\nWhy? Well, according to a quite recent court ruling in Germany, a website using Google Fonts redirects a reader to fonts.google.com in the background without consent. That might cause GDPR implications, that I'm not willing to risk.^[For inclined readers from Germany: see e.g. [this article](https://www.golem.de/news/landgericht-muenchen-einbindung-von-google-fonts-ist-rechtswidrig-2202-162826.html) or many others on this topic].\n\nIf you like a certain Font from fonts.google.com and want to self-host, you could check out the following tool, which helps you get up and running easily:\n[Web Fonts Helper](https://google-webfonts-helper.herokuapp.com/fonts). Make sure the font's license is respected properly and allows you to host your own copy.\n\n:::{.callout-important collapse=false appearance='default' icon=true}\n## Important Disclaimer\nI'm not a lawyer and **I do not give any legal advice here, whatsoever**. The above is my personal interpretation of what I read on the web and I chose to self host according to this. I'm not recommending either of the options presented in this section, but instead recommend you search proper legal advice if you are concerned about this. You're proceding at you own risk regarding this. In no event shall I be held liable for any claim, damages or other liability arising from the implementation of the above font-related code or use of the Web Fonts Helper tool.\n:::\n\n\n## Custom pages\nQuarto by default sets up the post-listing, if you start a new blog project. To give credits to my other projects, I designed a custom landing page for `https://jollydata.blog`. In addition there is a \"Projects\" page and a \"Data Viz Gallery\", as well as an \"About\" page.\n\n### Responsive Web Design\nI'm not a web developer and chances are, you're neither. quarto gives us a hand in providing easy means to leverage the [Bootstrap CSS Grid System](https://getbootstrap.com/docs/5.1/layout/css-grid/). Kudos to [Albert Rapp](https://getbootstrap.com/docs/5.1/layout/css-grid/), who details this in an extensive section of his post and gives directions on how to use this feature for responsive website design.\n\nI used his code as inspiration and combined it with elements from the bootswatch themes to implement the \"Cards\" on my landing page and on my project page.\nI can only recommend to check out the bootswatch theme documentation to get inspired by HTML elements that are ready to be used in a custom website such as landing pages or other special websites of your blog:\n\n![Example HTML elements, such as sliders, check boxes, input fields, etc. on https://bootswatch.com/litera/, screenshot taken on 2022-08-08](assets/bootswatch_elements.png)\n\nI implemented my projects page by copying and adapting the code for the \"Cards\" object. Hovering a theme element shows a Button on the top right that opens a pop-up with the HTML-code:\n\n:::{.grid}\n\n::: {.g-col-12 .g-col-md-6}\n![Screenshot from https://bootswatch.com/litera/, taken on 2022-08-08](assets/bootswatch_code.png)\n:::\n\n::: {.g-col-12 .g-col-md-6}\n\n![Screenshot from https://bootswatch.com/litera/, taken on 2022-08-08](assets/bootswatch_code_2.png)\n:::\n\n:::\n\nQuarto, such as RMarkdown did, understands HTML code. Just put it in the document, where you want to have the element.^[Be cautious with line indentation within qmd files. I had a very long and frustrating error-hunt until I figured out that you should not indent the HTML code.] For example my projects page's code now looks like this:\n\n::: {.panel-tabset}\n\n### Screenshot\n\n![Screenshot of the projects page with the light theme. Some style elements were changed in comparison with the default \"litera\" cards design, as seen in the screenshot above.](assets/projects.png)\n\n### Source Code\n\n``` markdown\n---\ntitle: \"projects\"\ncomments: false\npage-layout: full\n---\n\n::: {.grid}\n::: {.g-col-12 .g-col-md-6}\n\n<div class=\"card mb-3\">\n<div class=\"card-body\">\n<h3 class=\"card-title\">{namedropR}</h3>\n<h6 class=\"card-subtitle text-muted\">R package, available on CRAN</h6>\n</div>\n<img src=\"assets/images/namedropR_slide.png\"/>\n<div class=\"card-body\">\n<p class=\"card-text\">Enables R users to convert a bibliography into a collection of legible, well formatted banners to cite scientific literature on conference slides and posters. </p>\n<img src=\"https://github.com/nucleic-acid/namedropR/workflows/R-CMD-check/badge.svg\" alt=\"R-CMD-check\" style=\"max-width: 100%;\"> <img src=\"https://cranlogs.r-pkg.org/badges/namedropR\" alt=\"Monthly Downloads\">\n<br><br>\n<h5>Key features:</h5>\n</div>\n<ul class=\"list-group list-group-flush\">\n<li class=\"list-group-item\">Output as PNG or HTML object</li>\n<li class=\"list-group-item\">QR code to make citation scannable</li>\n<li class=\"list-group-item\">Predefined styles and individual adjustments</li>\n</ul>\n<div class=\"card-body\">\n<a href=\"https://nucleic-acid.github.io/namedropR/\" class=\"card-link\">Documentation</a>\n<a href=\"https://cloud.r-project.org/package=namedropR\" class=\"card-link\">View on CRAN</a>\n<a href=\"https://github.com/nucleic-acid/namedropR/\" class=\"card-link\">Source code</a>\n</div>\n</div>\n\n:::\n\n::: {.g-col-12 .g-col-md-6}\n\n<div class=\"card mb-3\">\n<div class=\"card-body\">\n<h3 class=\"card-title\">30 Day Chart Challenge</h3>\n<h6 class=\"card-subtitle text-muted\">2022 edition</h6>\n</div>\n<img src=\"assets/images/chartchallenge2022.png\"/>\n<div class=\"card-body\">\n<p class=\"card-text\">A data visualization community-challenge. Each day in April has a new prompt for a visualization from five different categories: Comparisons, Distributions, Relationships, Timeseries, Uncertainties.<br>\nI contributed 20 visualizations, learned new technologies and enjoyed the great contributions of the many other participants.</p>\n</div>\n<div class=\"card-body\">\n<a href=\"https://github.com/nucleic-acid/30DayChartChallenge_2022\" class=\"card-link\">My contributions' code</a>\n<a href=\"https://jollydata.blog/posts/2022-04-15-30daychartchallenge-interactive-plots/\" class=\"card-link\">Explore interactive plots</a>\n<a href=\"https://github.com/dominicroye/30DayChartChallenge_Edition2022\" class=\"card-link\">30DayChartChallenge on github</a>\n<a href=\"https://github.com/nucleic-acid/30DayChartChallenge_2022\" class=\"card-link\">and on Twitter</a>\n</div>\n</div>\n\n:::\n\n:::\n\n\n```\n\n:::\n\n\n\n### Data Viz Gallery\n\nThis is something that was already present in the Rmarkdown-based version of my blog. Luckily the code runs as smooth in quarto, as it did before.\nThe heavy-lifting is done by the [`{pixture}` package](https://www.royfrancis.com/pixture/) by Roy Francis.\n\nThis package basically takes a folder with images as input and generates a beautiful image gallery including JavaScript code that allows full screen swiping through the pictues.\n\nThe implementation for my [Gallery](https://jollydata.blog/challenges.html) consists of a few lines of code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pixture)\n\npixgallery(\n  list.files(\"assets/challenges_images\", \n             full.names=TRUE),\n  dim=\"350px\",\n  gap = \"10px\"\n)\n```\n:::\n\n\n### 404-error page\n\nThis is quite a self-explanatory section. You can basically design a custom page and put it e.g. in your projects root directory. You need to specify at your web hoster's settings, what page should be displayed, if a reader opens a non-existing page of your blog.\n\n## Importing existing blog posts\n\nPorting a RMarkdown blog to quarto *should* be quite straight forward -- and it most certainly is. At least in most of the cases. The R code is evaluated in the same way as it is in RMarkdown. I ran into a few frequently arising issues, mostly linked to layout options, that were used by `{distill}` but breaks quarto's renderer.\nThis required some manual tweaking and re-running of all the old posts. The process is still ongoing and I'll post updates on problems and solutions here:\n\n### Output layout\nIn `{distill}` you specified the output of a code chunk via chunk options, such as `layout=\"l-page\"`:\n\n![](assets/layout_old.png)\n\nIn quarto the layout is specified by wrapping the code chunk into a `.column-*` DIV:\n\n![](assets/layout_new.png)\n\n### Keep those old URLs alive!\n\nThe new quarto blog might have a different URL structure than your previous one. To keep old URLs valid (e.g. if they were shared somewhere), you can specify \"alias\" URLs in each post's YAML header. This generates a small HTML file in that old location that links to the new/correct URL. You'd best check out the excellent [quarto documentation](https://quarto.org/docs/websites/website-navigation.html#redirects) on this.\n\nIf your blog is hosted on [Netlify](https://www.netlify.com), you might want to check out [Danielle Navarro's Chapter](https://blog.djnavarro.net/posts/2022-04-20_porting-to-quarto/#netlify-redirects) on that.\n\n## Unsorted collection\n\nIn this last section I collect a few features, that I implemented / activated as well. I'll only list them here, as there is great documentation of them already out there:\n\n- [quarto extensions](https://quarto.org/docs/extensions/): these are definitely worth keeping an eye on. By opening quarto for extensions, Rstudio provided the space for creative and helpful tools that enrich the new ecosystem. Currently implemented for this blog are: [Fontawesome Icons](https://github.com/quarto-ext/fontawesome) and [Grouped Tabsets](https://github.com/quarto-ext/grouped-tabsets)\n- Comments functionality can be added by either [utterances](https://utteranc.es) or [hypothes.is](https://web.hypothes.is).\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}